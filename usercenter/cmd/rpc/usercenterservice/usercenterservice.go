// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package usercenterservice

import (
	"context"

	"goChat/usercenter/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResp             = pb.BaseResp
	GeTUserByUsernameReq = pb.GeTUserByUsernameReq
	GeTUserResp          = pb.GeTUserResp
	InsertUserReq        = pb.InsertUserReq
	InsertUserResp       = pb.InsertUserResp
	LoginByIdReq         = pb.LoginByIdReq
	LoginByIdResp        = pb.LoginByIdResp
	User                 = pb.User

	UsercenterService interface {
		GeTUserByUsername(ctx context.Context, in *GeTUserByUsernameReq, opts ...grpc.CallOption) (*GeTUserResp, error)
		InsertUser(ctx context.Context, in *InsertUserReq, opts ...grpc.CallOption) (*InsertUserResp, error)
		LoginById(ctx context.Context, in *LoginByIdReq, opts ...grpc.CallOption) (*LoginByIdResp, error)
	}

	defaultUsercenterService struct {
		cli zrpc.Client
	}
)

func NewUsercenterService(cli zrpc.Client) UsercenterService {
	return &defaultUsercenterService{
		cli: cli,
	}
}

func (m *defaultUsercenterService) GeTUserByUsername(ctx context.Context, in *GeTUserByUsernameReq, opts ...grpc.CallOption) (*GeTUserResp, error) {
	client := pb.NewUsercenterServiceClient(m.cli.Conn())
	return client.GeTUserByUsername(ctx, in, opts...)
}

func (m *defaultUsercenterService) InsertUser(ctx context.Context, in *InsertUserReq, opts ...grpc.CallOption) (*InsertUserResp, error) {
	client := pb.NewUsercenterServiceClient(m.cli.Conn())
	return client.InsertUser(ctx, in, opts...)
}

func (m *defaultUsercenterService) LoginById(ctx context.Context, in *LoginByIdReq, opts ...grpc.CallOption) (*LoginByIdResp, error) {
	client := pb.NewUsercenterServiceClient(m.cli.Conn())
	return client.LoginById(ctx, in, opts...)
}
